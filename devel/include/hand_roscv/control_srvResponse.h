// Generated by gencpp from file hand_roscv/control_srvResponse.msg
// DO NOT EDIT!


#ifndef HAND_ROSCV_MESSAGE_CONTROL_SRVRESPONSE_H
#define HAND_ROSCV_MESSAGE_CONTROL_SRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_roscv
{
template <class ContainerAllocator>
struct control_srvResponse_
{
  typedef control_srvResponse_<ContainerAllocator> Type;

  control_srvResponse_()
    : task()
    , vector0(0.0)
    , vector1(0.0)
    , vector2(0.0)  {
    }
  control_srvResponse_(const ContainerAllocator& _alloc)
    : task(_alloc)
    , vector0(0.0)
    , vector1(0.0)
    , vector2(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _task_type;
  _task_type task;

   typedef float _vector0_type;
  _vector0_type vector0;

   typedef float _vector1_type;
  _vector1_type vector1;

   typedef float _vector2_type;
  _vector2_type vector2;





  typedef boost::shared_ptr< ::hand_roscv::control_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_roscv::control_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct control_srvResponse_

typedef ::hand_roscv::control_srvResponse_<std::allocator<void> > control_srvResponse;

typedef boost::shared_ptr< ::hand_roscv::control_srvResponse > control_srvResponsePtr;
typedef boost::shared_ptr< ::hand_roscv::control_srvResponse const> control_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_roscv::control_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_roscv::control_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_roscv::control_srvResponse_<ContainerAllocator1> & lhs, const ::hand_roscv::control_srvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.task == rhs.task &&
    lhs.vector0 == rhs.vector0 &&
    lhs.vector1 == rhs.vector1 &&
    lhs.vector2 == rhs.vector2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_roscv::control_srvResponse_<ContainerAllocator1> & lhs, const ::hand_roscv::control_srvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_roscv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hand_roscv::control_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_roscv::control_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_roscv::control_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_roscv::control_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_roscv::control_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_roscv::control_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_roscv::control_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb1c130019d7a0db5a1c68e6639b601b";
  }

  static const char* value(const ::hand_roscv::control_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb1c130019d7a0dbULL;
  static const uint64_t static_value2 = 0x5a1c68e6639b601bULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_roscv::control_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_roscv/control_srvResponse";
  }

  static const char* value(const ::hand_roscv::control_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_roscv::control_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 服务器响应发送的数据\n"
"string task\n"
"float32 vector0\n"
"float32 vector1\n"
"float32 vector2\n"
"\n"
;
  }

  static const char* value(const ::hand_roscv::control_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_roscv::control_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task);
      stream.next(m.vector0);
      stream.next(m.vector1);
      stream.next(m.vector2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct control_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_roscv::control_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_roscv::control_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.task);
    s << indent << "vector0: ";
    Printer<float>::stream(s, indent + "  ", v.vector0);
    s << indent << "vector1: ";
    Printer<float>::stream(s, indent + "  ", v.vector1);
    s << indent << "vector2: ";
    Printer<float>::stream(s, indent + "  ", v.vector2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_ROSCV_MESSAGE_CONTROL_SRVRESPONSE_H
