// Generated by gencpp from file panda_arm_control/effector_control_param.msg
// DO NOT EDIT!


#ifndef PANDA_ARM_CONTROL_MESSAGE_EFFECTOR_CONTROL_PARAM_H
#define PANDA_ARM_CONTROL_MESSAGE_EFFECTOR_CONTROL_PARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panda_arm_control
{
template <class ContainerAllocator>
struct effector_control_param_
{
  typedef effector_control_param_<ContainerAllocator> Type;

  effector_control_param_()
    : type()
    , x0(0.0)
    , y0(0.0)
    , z0(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , w(0.0)  {
    }
  effector_control_param_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , x0(0.0)
    , y0(0.0)
    , z0(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , w(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef float _x0_type;
  _x0_type x0;

   typedef float _y0_type;
  _y0_type y0;

   typedef float _z0_type;
  _z0_type z0;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _w_type;
  _w_type w;





  typedef boost::shared_ptr< ::panda_arm_control::effector_control_param_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_arm_control::effector_control_param_<ContainerAllocator> const> ConstPtr;

}; // struct effector_control_param_

typedef ::panda_arm_control::effector_control_param_<std::allocator<void> > effector_control_param;

typedef boost::shared_ptr< ::panda_arm_control::effector_control_param > effector_control_paramPtr;
typedef boost::shared_ptr< ::panda_arm_control::effector_control_param const> effector_control_paramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_arm_control::effector_control_param_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_arm_control::effector_control_param_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_arm_control::effector_control_param_<ContainerAllocator1> & lhs, const ::panda_arm_control::effector_control_param_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.x0 == rhs.x0 &&
    lhs.y0 == rhs.y0 &&
    lhs.z0 == rhs.z0 &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.w == rhs.w;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_arm_control::effector_control_param_<ContainerAllocator1> & lhs, const ::panda_arm_control::effector_control_param_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_arm_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panda_arm_control::effector_control_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_arm_control::effector_control_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_arm_control::effector_control_param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_arm_control::effector_control_param_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_arm_control::effector_control_param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_arm_control::effector_control_param_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_arm_control::effector_control_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67ada03f2ea0b0c7f0ae00ddfff182e8";
  }

  static const char* value(const ::panda_arm_control::effector_control_param_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67ada03f2ea0b0c7ULL;
  static const uint64_t static_value2 = 0xf0ae00ddfff182e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_arm_control::effector_control_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_arm_control/effector_control_param";
  }

  static const char* value(const ::panda_arm_control::effector_control_param_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_arm_control::effector_control_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n"
"float32 x0\n"
"float32 y0\n"
"float32 z0\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 w\n"
;
  }

  static const char* value(const ::panda_arm_control::effector_control_param_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_arm_control::effector_control_param_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.x0);
      stream.next(m.y0);
      stream.next(m.z0);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct effector_control_param_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_arm_control::effector_control_param_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_arm_control::effector_control_param_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "x0: ";
    Printer<float>::stream(s, indent + "  ", v.x0);
    s << indent << "y0: ";
    Printer<float>::stream(s, indent + "  ", v.y0);
    s << indent << "z0: ";
    Printer<float>::stream(s, indent + "  ", v.z0);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_ARM_CONTROL_MESSAGE_EFFECTOR_CONTROL_PARAM_H
